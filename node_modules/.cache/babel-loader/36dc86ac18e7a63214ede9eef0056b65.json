{"ast":null,"code":"var _jsxFileName = \"/Users/akseluhr/minhemsida/src/views/projectsView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ProjectCard from '../components/ProjectCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hej = \"Some quick example text to build on the card title and make up the bulk of the card's content.\"; // readme: https://raw.githubusercontent.com/akseluhr/binary-classifications/main/README.md\n// starred: https://api.github.com/users/akseluhr/starred\n\nconst projectNames = [];\nconst projectDescriptions = [];\nconst projectPaths = [];\nconst projectLanguages = [];\n\nconst ProjectsView = () => {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [descript, setDescription] = useState('');\n  const [path, setUrl] = useState('');\n  const [planguage, setLanguage] = useState('');\n  const [err, setErr] = useState('');\n  useEffect(() => {\n    fetch('https://api.github.com/users/akseluhr/starred').then(res => res.json()).then(data => {\n      console.log(data);\n      setData(data[0]);\n      setData(data[1]);\n      setData(data[2]);\n      setData(data[3]);\n      setData(data[3]);\n    }).catch(err);\n  }, []);\n\n  const setData = _ref => {\n    let {\n      name,\n      description,\n      url,\n      language\n    } = _ref;\n    setTitle(name);\n    setDescription(description);\n    setUrl(url);\n    setLanguage(language);\n    projectNames.push(name);\n    projectDescriptions.push(description);\n    projectPaths.push(url);\n    projectLanguages.push(language);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"projectView\",\n    children: [/*#__PURE__*/_jsxDEV(ProjectCard, {\n      title: projectNames[0],\n      language: projectLanguages[0],\n      text: projectDescriptions[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n      title: projectNames[1],\n      language: projectLanguages[1],\n      text: projectDescriptions[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n      title: projectNames[2],\n      language: projectLanguages[2],\n      text: projectDescriptions[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProjectCard, {\n      language: projectLanguages[3],\n      text: projectDescriptions[3]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectsView, \"/btpSba1qbtiJHlAWK8jOw0CGK0=\");\n\n_c = ProjectsView;\nexport default ProjectsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectsView\");","map":{"version":3,"sources":["/Users/akseluhr/minhemsida/src/views/projectsView.js"],"names":["React","useEffect","useState","ProjectCard","hej","projectNames","projectDescriptions","projectPaths","projectLanguages","ProjectsView","title","setTitle","descript","setDescription","path","setUrl","planguage","setLanguage","err","setErr","fetch","then","res","json","data","console","log","setData","catch","name","description","url","language","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ProjectCard from '../components/ProjectCard'; \n\nconst hej = \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n\n// readme: https://raw.githubusercontent.com/akseluhr/binary-classifications/main/README.md\n// starred: https://api.github.com/users/akseluhr/starred\n\nconst projectNames = [];\nconst projectDescriptions = [];\nconst projectPaths = [];\nconst projectLanguages = [];\n\n\nconst ProjectsView = () => {\n    const [title, setTitle] = useState('')\n    const [descript, setDescription] = useState('')\n    const [path, setUrl] = useState('')\n    const [planguage, setLanguage] = useState('')\n    const [err, setErr] = useState('')\n\n    useEffect(() => {\n        fetch('https://api.github.com/users/akseluhr/starred')\n            .then(res => res.json())\n            .then(data => {\n                console.log(data)\n                setData(data[0])\n                setData(data[1])\n                setData(data[2])\n                setData(data[3])\n                setData(data[3])\n            })\n            .catch(err);\n    }, []); \n\n    const setData = ({\n        name,\n        description,\n        url,\n        language\n    }) => {\n\n        setTitle(name);\n        setDescription(description);\n        setUrl(url);\n        setLanguage(language);\n\n        projectNames.push(name) \n        projectDescriptions.push(description)\n        projectPaths.push(url)\n        projectLanguages.push(language)\n    };\n    return (\n\n        <div className=\"projectView\">\n            <ProjectCard title={projectNames[0]} language={projectLanguages[0]} text={projectDescriptions[0]}/>\n            <ProjectCard title={projectNames[1]} language={projectLanguages[1]} text={projectDescriptions[1]}/>\n            <ProjectCard title={projectNames[2]} language={projectLanguages[2]} text={projectDescriptions[2]}/>\n            <ProjectCard language={projectLanguages[3]} text={projectDescriptions[3]}/>\n            \n\n            \n        </div>\n\n\n    );\n\n}\n\n\nexport default ProjectsView\n"]},"metadata":{},"sourceType":"module"}